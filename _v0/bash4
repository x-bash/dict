# shellcheck shell=bash

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

dict_make(){
    local O="${1:?Please provide object name}"
    unset "$O"
    eval "declare -gA $O"
    eval "$O=()"
    # eval "declare -p $O"
}

# alias dict_make="declare -gA"

# O=b dload "$( a.dump | dgrep "abc" | dgerp "abc" )"

dict_clear(){
    local O="${O:?Please provide object name}"
    eval "declare -A $O=()"
}

dict_dump(){
    local O="${O:?Please provide object name}"
    local key
    local val
    local i=0

    IFS="${DICT_SEP}"
    local sss
    sss="$(eval echo "\"\${!"$O"[*]}\"")"

    for key in $sss; do
        val="$(eval echo "\"\${$O[$key]}\"")"
        printf "%s${DICT_SEP}%s${DICT_SEP}" "$key" "$val"
        i=$((i+1))
    done
    printf "%s" "$i"
}

# bash 4 means we 'read -d' is available
dict_load(){
    local O="${O:?Please provide object name}"
    dict_make "$O"
    local key
    local val
    while :; do
        read -d "${DICT_SEP}" -r key || return 0
        read -d "${DICT_SEP}" -r val || return 0
        eval "$O[\"\$key\"]=\"\$val\""
    done
}

dict_size(){
    : "${O:?Please provide object name}"
    # printf "%s" "$(eval "\$$O[#@]")"
    eval printf "%s" "\"\${#${O}[@]}\""
}

dict_get(){
    : "${O:?Please provide object name}"
    local IFS="${DICT_KEYS_SEP}"
    local key="$*"

    local s
    s="$(eval printf "%s" "\"\${${O}[$key]}\"")"
    # echo ----- "\"\${${O}[$key]}\"" >&2
    if [ -n "$s" ]; then
        echo "$s"
    else
        return 1
    fi
}

dict_put(){
    : "${O:?Please provide object name}"
    local IFS="${DICT_KEYS_SEP}"
    local key="$*"
    local val="${key##*${DICT_KEYS_SEP}}"
    key="${key%${DICT_KEYS_SEP}*}"

    # echo "---> $key" >&2
    # echo "${O}[\"\$key\"]"="\"\$val\"" >&2
    eval "${O}[\"\$key\"]"="\"\$val\"" 2>/dev/null || dict_make "$O"; eval "${O}[\$key]"="\"\$val\""
}

# Not universal enough
dict_scope(){
    : "${O:?Please provide object name}"
    local IFS="${DICT_KEYS_SEP}"
    local s
    s=$(printf "%s${DICT_KEYS_SEP}" "$*")

    local key
    local i=0
    IFS="${DICT_SEP}"
    local sss
    sss="$(eval echo "\"\${!"$O"[*]}\"")"

    for key in $sss; do
        # echo "!!! $key" >&2
        if [[ "$key" == "$s"* ]]; then
            val="$(eval echo "\"\${$O[\$key]}\"")"
            printf "%s${DICT_SEP}%s${DICT_SEP}" "${key#$s}" "$val"
            i=$((i+1))
        fi
    done
    printf "%s" "$i"
}

dict_remove(){
        : "${O:?Please provide object name}"
    local IFS="${DICT_KEYS_SEP}"
    local s
    s=$(printf "%s" "$*")

    IFS="${DICT_SEP}"
    local sss
    sss="$(eval echo "\"\${!"$O"[*]}\"")"

    local code=1
    local key
    for key in $sss; do
        if [[ "$key" = "$s" ]]; then
            eval "unset $O[\'\$key\']"
            code=0
        fi
    done
    return "$code"
}

dict_drop(){
    : "${O:?Please provide object name}"
    local IFS="${DICT_KEYS_SEP}"
    local s
    s=$(printf "%s" "$*")

    IFS="${DICT_SEP}"
    local sss
    sss="$(eval echo "\"\${!"$O"[*]}\"")"

    local code=1
    local key
    for key in $sss; do
        if [[ "$key" =~ $s ]]; then
            # echo "1231132"
            # echo "!!---! unset $O[\"\$key\"]"
            eval "unset $O[\'\$key\']"
            code=0
        fi
    done
    return "$code"
}


dict_grep(){
    : "${O:?Please provide object name}"
    local IFS="${DICT_KEYS_SEP}"
    local s
    s=$(printf "%s${DICT_KEYS_SEP}" "$*")

    for key in eval "\${\!$O[@]}"; do
        if [[ "$key" =~ $s ]]; then
            eval "echo \"\$O[\$key]\""
            break
        fi
    done
}

dict_iter(){
    local fun="$*" # "$1 \"\$key\" \"\$val\""
    if [ "$#" -eq 1 ] && command -v "$1"; then
        fun="$1 \"\$key\" \"\$val\""
    fi

    : "${O:?Please provide object name}"

    local key
    local val

    for key in eval "\${\!$O[@]}"; do
        val="$(eval "\${\$O[\$key]}")"
        eval "$fun"
    done
}
