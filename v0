# shellcheck shell=sh
# shellcheck disable=SC2039

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

# TODO: key of
# TODO: value of

dict_alias(){
    alias dnew="dict_new"
    alias dput="dict_pput" #    dict_put_p
    alias dget="dict_pget"

    # default  o.dropr

    # rm: remove the key
    alias dremove="dict_premove"

    # drop: pattern: key, value
    # drop key
    # drop - key
    alias ddrop="dict_pdrop"
    alias dgrep="dict_pgrep"
}

dict_new(){
    local O="${1:?list_name}"
    dict_make "$O"
    local f
    for f in dump load has size put get grep grepr drop dropr json print; do
        alias "$O.$f=O=$O dict_$f"
    done
    alias "$O.delete"="O=$O dict_delete"
}

dict_delete(){
    local O="${1:?list_name}"

    for f in dump load has size put get grep grepr drop dropr json print; do
        alias "$O.$f="
    done
    alias "$O.delete="
}

# 001 for \n
# 002 for "
DICT_SEP="$(printf "\003")"
DICT_KV_SEP="$(printf "\004")"
DICT_KEYS_SEP="$(printf "\005")"

dict_free(){
    eval "unset $O"
}

dict_has(){
    dict_get "$@" > /dev/null
}

dict_is_empty(){
    [ "$(dict_size)" -eq 0 ]
}

dict_json(){
    dict_dump | dict_pjson "$@"
}

dict_print(){
    dict_dump | dict_pprint "$@"
}

dict_pgrep(){
    AWK_CODE="( keyline ~ key )" dict_premove "$@"
}

dict_pdrop() {
    AWK_CODE="! (keyline ~ key)" dict_premove "$@"
}

# drop_by_idx, drop_by_regex, drop_by_glob
dict_premove() {
    [ $# -eq 0 ] && printf "%s\n" "Accept more than one argument." >&2

    local IFS="${DICT_KEYS_SEP}"
    local AWK_CODE
    AWK_CODE=${AWK_CODE:-"keyline != key"}
    {
        printf "%s${DICT_SEP}" "$*"
        cat
    } | awk -v RS="${DICT_SEP}" '
        NR==1 { key = $0;   ORS=RS;   len=0   }
        NR>=2 {
            if (NR % 2 == 0) {  # key
                keyline = $0
            } else {
                if ('"$AWK_CODE"')  print keyline ORS $0
                else                len = len - 1
            }
        }
        END   {
            if (len < 0) {
                printf("%s", (keyline + len))
                exit 0
            } else {
                printf("%s", keyline)
                exit 1
            }
        }
    ' -
}

dict_pput(){
    {
        local s
        local IFS="${DICT_KEYS_SEP}"
        s="$*"
        printf "%s${DICT_SEP}%s${DICT_SEP}" "${s%${DICT_KEYS_SEP}*}" "${s##*${DICT_KEYS_SEP}}"; 
        cat
    } | awk -v RS="${DICT_SEP}" '

        BEGIN { sw = 0; ORS = RS;   }
        NR==1 { key = $0            }
        NR==2 { val = $0            }
        NR>=3 {
            if (NR % 2 == 1) { # key
                keyline = $0
            } else {
                if (keyline == key) {
                    print keyline RS val
                    valline = ""
                    sw = 1
                } else {
                    print keyline RS $0
                }
            }
        }
        END   { 
            if (sw == 1)    printf("%s", keyline)
            else {
                print key RS val
                printf("%s", (keyline+1))
            }           
        }
    ' -
}

dict_pget(){
    local IFS="${DICT_KEYS_SEP}"
    {
        printf "%s${DICT_SEP}" "$*"
        cat
    } | awk -v RS="${DICT_SEP}" '
        NR==1 {
            tgt = $0;   tgt_len = length(tgt);  exit_code = 1
        }
        NR>=2 {
            if (NR % 2 == 0) {  # key
                keyline = $0
            } else {
                if (keyline == tgt) {
                    print $0
                    exit_code = 0
                    exit
                }
            }
        }
        END {
            exit exit_code
        }
    ' -
}

dict_pfilter(){
    local s
    local AWK_CODE=""

    case $# in
        0)  exit 4;;
        1)  
            AWK_CODE="keyline == tgt" 
            s="$1" ;;
        *)  
            local IFS="${DICT_KEYS_SEP}"
            s="$*";
            AWK_CODE="substr(keyline, 1, tgt_len) == tgt" ;;
    esac

    {
        printf "%s${DICT_SEP}" "$s"
        cat
    } | awk -v RS="${DICT_SEP}" '
        NR==1 {
            tgt = $0;   tgt_len = length(tgt);  exit_code = 1
        }
        NR>=2 {
            if (NR % 2 == 0) {  # key
                keyline = $0
            } else {
                if ('"${AWK_CODE}"') {
                    print $0
                    exit_code = 0
                    exit
                }
            }
        }
        END {
            exit exit_code
        }
    ' -
}

# dict_scope <key1> <key2> <key3>
dict_pscope(){
    {
        local IFS="${DICT_KEYS_SEP}"
        printf "%s${DICT_KEYS_SEP}${DICT_SEP}" "$*"
        cat
    } | awk -v RS="${DICT_SEP}" '
        NR==1 {
            key = $0;   ORS=RS;   len=0
            key_len = length(key)
        }
        NR>=2 {
            if (NR % 2 == 0) {  # key
                keyline = $0
            } else {
                if (substr(keyline, 1, key_len) == key) {
                    print substr(keyline, key_len+1) ORS $0
                    len = len + 1
                }
            }
        }
        END {
            printf("%s", len)
        }
    ' -
}

DICT_SEP="$(printf "\003")"
dict_map_awk(){
    # TODO: modify_key(key, value)
    # TODO: modify_value(key, value)
    awk -v RS="${DICT_SEP}" "$1""

    
    " -
}

# dict_dump
dict_pjson(){
    awk -v RS="${DICT_SEP}" '
        BEGIN { len = $0;   result = "{";     quote = "\002";  }
        NR>=1 {
            if (NR % 2 == 1) { # key
                key = $0
            } else {
                if (NR == 2)    result = result "\n  "  quote key quote ": " quote $0 quote
                else            result = result ",\n  " quote key quote ": " quote $0 quote
            }
        }
        END   { 
            result = result "\n}"

            # gsub("\001", "\\n", result)
            gsub("\"", "\\\"", result)
            gsub("\002", "\"", result)
            gsub("\v", "\\v", result)
            gsub("\b", "\\b", result)
            gsub("\t", "\\t", result)
            gsub("\r", "\\r", result)
            printf("%s", result)
        }
    ' -
}

dict_pprint(){
    {
        printf "${ITEM_SEP:-"\\n"}${DICT_SEP}${KV_SEP:-"="}${DICT_SEP}"  
        cat
    } | awk -v RS="${DICT_SEP}" '
            NR==1 {     ORS = $0            }
            NR==2 {     KV_SEP  = $0        }
            NR>=3 {
                if (NR % 2 == 1)    key = $0
                else                print  key KV_SEP $0
            }
        ' -
}

# . ./dict_str

xrc dict/_v0/str

# if [ -n "${BASH_VERSION}" ]; then
#     case "${BASH_VERSION}" in
#         3*)     
#             xrc dict/_v0/str    ;;
#         *)      
#             xrc dict/_v0/str;
#             #xrc dict/_v0/bash4   
#         ;;
#     esac
# elif [ -n "${ZSH_VERSION}" ]; then
#     xrc dict/_v0/zsh
# else
#     xrc dict/std/str
# fi
